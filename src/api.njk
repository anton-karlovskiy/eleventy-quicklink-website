---
title: Quicklink
layout: layouts/base.njk
description: Faster subsequent page-loads by prefetching in-viewport links during idle time.
sections:
  api:
    title: "API"
    summary: "`quicklink` accepts an optional options object with the following parameters:"
    content:
      items:
        - "* `el`: DOM element to observe for in-viewport links to prefetch"
        - "* `urls`: Static array of URLs to prefetch (instead of observing `document` or a DOM element links in the viewport)"
        - "* `timeout`: Integer for the `requestIdleCallback` timeout. A time in milliseconds by which the browser must execute prefetching. Defaults to 2 seconds."
        - "* `timeoutFn`: Function for specifying a timeout. Defaults to `requestIdleCallback`. Can also be swapped out for a custom function like [networkIdleCallback](https://github.com/pastelsky/network-idle-callback) (see demos)"
        - "* `priority`: Boolean specifying preferred priority for fetches. Defaults to `false`. `true` will attempt to use the `fetch()` API where supported (rather than rel=prefetch)"
        - "* `origins`: Static array of URL hostname strings that are allowed to be prefetched. Defaults to the same domain origin, which prevents _any_ cross-origin requests."
        - "* `ignores`: A RegExp, Function, or Array that further determines if a URL should be prefetched. These execute _after_ origin matching."   
      TODOs:
        - "* Explore detecting file-extension of resources and using [rel=preload](https://w3c.github.io/preload/) for high priority fetches"
        - "* Explore using [Priority Hints](https://github.com/WICG/priority-hints) for importance hinting"
  recipes:
    title: "Recipes"
    content:
      items:
        -
          caption: "### Set a custom timeout for prefetching resources"
          explanation: "Defaults to 2 seconds (via `requestIdleCallback`). Here we override it to 4 seconds:"
          codesnippet: >-
            quicklink({
              timeout: 4000
            });
        -
          caption: "### Set the DOM element to observe for in-viewport links"
          explanation: "Defaults to `document` otherwise."
          # TODO: should be 'carousel'
          codesnippet: >-
            const elem = document.getElementById(`carousel`);

            quicklink({
              el: elem
            });
        -
          caption: "### Set a custom array of URLs to be prefetched"
          explanation: "If you would prefer to provide a static list of URLs to be prefetched, instead of detecting those in-viewport, customizing URLs is supported."
          # TODO: should be urls: ['2.html','3.html', '4.js']
          codesnippet: >-
            quicklink({
              urls: [`2.html`,`3.html`, `4.js`]
            });
        -
          caption: "### Set the request priority for prefetches"
          explanation: "Defaults to low-priority (`rel=prefetch` or XHR). For high-priority (`priority: true`), attempts to use `fetch()` or falls back to XHR."
          codesnippet: >-
            quicklink({ priority: true });
        -
          caption: "### Specify a custom list of allowed origins"
          explanation: >-
            Provide a list of hostnames that should be prefetch-able. Only the same origin is allowed by default.

            > **Important:** You must also include your own hostname!
          # TODO: should be 'my-website.com', 'api.my-website.com', 'other-website.com', 'example.com'
          codesnippet: >-
            quicklink({
              origins: [
                // add mine
                `my-website.com`,
                `api.my-website.com`,
                // add third-parties
                `other-website.com`,
                `example.com`,
                // ...
              ]
            });
        -
          caption: "### Allow all origins"
          explanation: >-
            "Enables all cross-origin requests to be made."

            > **Note:** You may run into [CORB](https://chromium.googlesource.com/chromium/src/+/master/services/network/cross_origin_read_blocking_explainer.md) and [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) issues!
          codesnippet: >-
            quicklink({
              origins: true,
              // or
              origins: []
            });
        -
          caption: "### Custom Ignore Patterns"
          explanation: These filters run _after_ the `origins` matching has run. Ignores can be useful for avoiding large file downloads or for responding to DOM attributes dynamically.
          # TODO: should be - all "/api/*" pathnames, - all ".zip" extensions, - all a tags with "noprefetch" attribute
          # => TODO: is not rendered
          codesnippet: >-
            // Same-origin restraint is enabled by default.

            // This example will ignore all requests to:

            //  - all `/api/*` pathnames

            //  - all `.zip` extensions

            //  - all a tags with `noprefetch` attribute

            quicklink({
              ignores: [
                /\/api\/?/,
                uri => uri.includes(`.zip`),
                (uri, elem) => elem.hasAttribute(`noprefetch`)
              ]
            });
          extra: >-
            You may also wish to ignore prefetches to URLs which contain a URL fragment (e.g. `index.html#top`). This can be useful if you (1) are using anchors to headings in a page or (2) have URL fragments setup for a single-page application, and which to avoid firing prefetches for similar URLs.


            Using `ignores` this can be achieved as follows:

            ```js
            
            quicklink({
              ignores: [
                  uri => uri.includes('#')
                  // or RegExp: /#(.+)/
                  // or element matching: (uri, elem) => !!elem.hash
              ]
            });
bottomResource:
  caption: README on GitHub
  link: https://github.com/GoogleChromeLabs/quicklink/#api/
---
{# TODO: separate for section #}
{% extends "layouts/normal-section-wrapper.njk" %}
{% block section %}
{% sectionTitle sections.api.title %}
{{ sections.api.summary | markdown | safe }}
{% for item in sections.api.content.items %}
  {{ item | markdown | safe }}
{% endfor %}
TODO:
{% for TODO in sections.api.content.TODOs %}
  {{ TODO | markdown | safe }}
{% endfor %}

{% sectionTitle sections.recipes.title %}
{% for item in sections.recipes.content.items %}
  {{ item.caption | markdown | safe }}
  {{ item.explanation | markdown | safe }}
  {% highlight "js" %}
    {{ item.codesnippet }}
  {% endhighlight %}
  {% if item.extra %}
  {{ item.extra | markdown | safe }}
  {% endif %}
{% endfor %}
{% endblock %}
